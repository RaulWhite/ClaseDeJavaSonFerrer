package notas;

import java.io.*;
import javax.swing.*;

public class Libreta {

	private final String NOMBRE_ARCHIVO = "notas.txt";
	private final int MAX_NOTAS = 1000;

	private Nota[] notas = new Nota[MAX_NOTAS];
	private int numNotas = 0;

	// Declaración del archivo global	
	File archivo = new File(NOMBRE_ARCHIVO);
	
	public Libreta() {
		leerNotas();
	}

	public void addNota(Nota nota) {

		// TODO: A�adir despu�s de la �ltima nota del array la nota que se nos
		// pasa como par�metro.
		// Utilizar el valor de la variable numNotas.
		// Actualizar despu�s el valor de numNotas.
		// En caso de que hayamos llegado al m�ximo de notas, no hacer nada.
				
		if (numNotas == MAX_NOTAS){
            return;
		} else {
            notas[numNotas] = nota;
            numNotas++;
        }

	}

	public void delNota(int posicion) {

		// TODO: Eliminar el elemento del array notas[] que ocupa la posici�n
		// indicada.
		// Para ello, mueve hacia arriba todos los elementos que vengan a
		// continuaci�n una posici�n, y actualiza la variable numNotas.
		
		notas[numNotas] = notas[posicion];
		
		for (int i = posicion; i < numNotas; i++) {
			notas[i] = notas[i+1];
		}
		
		notas[numNotas] = null;
		
		numNotas--;

	}

	public void leerNotas() {

		// TODO: Leer todas las filas del archivo, y rellenar el array notas[].
		// Hacer que la variable numNotas sea igual al total de notas le�das.
		// Si no se encuentra el archivo, hacer que se muestre el mensaje
		// indicado en el enunciado de la pr�ctica.
		// Si se produce otro tipo de excepci�n, mostrar la traza del error en
		// la consola.

		// La informaci�n de cada nota est� guardada en dos l�neas de texto, una
		// para el t�tulo y otra para la descripci�n.
		// Puedes usar los m�todos substring() e indexOf() para separar los
		// datos de los comentarios del archivo.
		
			try {
				FileReader leerArchivo = new FileReader(archivo);
				BufferedReader buffer = new BufferedReader(leerArchivo);
				
				String titulo;
				String descripcion;
				String aux = buffer.readLine();
				boolean eof = false;
				
				int i;
				
				for (i = 0; !eof; i++){
					
					titulo = aux;
					
					if(titulo == null){
						eof = true;
						break;
					}
					
					titulo = titulo.substring("TITULO=".length());
					
					descripcion = buffer.readLine();
					descripcion = descripcion.substring("DESCRIPCION=".length());
					
					aux = buffer.readLine();
					
					while (aux != null
							&& !(aux.contains("TITULO="))){
						descripcion = descripcion + "\n" + aux;
						aux = buffer.readLine();
					}
					
					notas[i] = new Nota(titulo, descripcion);
					numNotas = (i+1);
					
				}
				
				buffer.close();
			} catch (FileNotFoundException fnfe){
				JOptionPane.showMessageDialog(null,
						 "No se ha podido encontrar un archivo válido de tareas.\nSe creará uno nuevo automáticamente.",
						 "Archivo de tareas no encontrado.",
						 JOptionPane.WARNING_MESSAGE);
				try {
					archivo.createNewFile();
				} catch (IOException ioe) {
					ioe.printStackTrace();
				}
			} catch (IOException ioe) {
				ioe.printStackTrace();
			}
						
	}

	public void guardarNotas() {

		// TODO: Guardar las notas del array notas[] en el archivo "notas.txt".

		// El formato en que se guardar�n debe ser el que aparece en el
		// enunciado de la pr�ctica.
		// Si se produce una excepci�n,se mostrar� el error que aparece en el
		// enunciado.
		
		try {
			FileWriter guardarArchivo = new FileWriter(archivo);
			BufferedWriter buffer = new BufferedWriter(guardarArchivo);
			
			for (int i = 0; i < numNotas; i++) {
				buffer.write("TITULO=" + notas[i].getTitulo() + "\n");
				buffer.write("DESCRIPCION=" + notas[i].getDescripcion() + "\n");
			}
			
			buffer.close();
		} catch (IOException ioe) {
			JOptionPane.showMessageDialog(null,
					 "No se ha podido guardar el archivo de notas.",
					 "Error de E/S",
					 JOptionPane.ERROR_MESSAGE);
		}

	}

	public Nota[] getNotas() {
		return notas;
	}

	public int getNumNotas() {
		return numNotas;
	}

}
